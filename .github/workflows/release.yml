name: release
# on: pull_request
on:
  push:
    tags:
      - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
  IOS_DEPLOYMENT_TARGET: '13.0'
  MAC_DEPLOYMENT_TARGET: '11.0'
  MAC_CATALYST_DEPLOYMENT_TARGET: '13.1'
  WATCHOS_DEPLOYMENT_TARGET: '6.0'
  TVOS_DEPLOYMENT_TARGET: '11.0'
  VISIONOS_DEPLOYMENT_TARGET: '1.0'
  ENABLE_BITCODE: OFF
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF
  EMSCRIPTEN_VERSION: 3.1.28

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: opencv2-source
      env:
        opencv-version: 2.4.13.7
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake

        rm modules/core/src/gl_*
        rm modules/core/src/gpumat.cpp
        rm modules/core/src/opengl_*
        rm modules/core/include/opencv2/core/cuda_*
        rm modules/core/include/opencv2/core/devmem2d.hpp
        rm modules/core/include/opencv2/core/gpumat.hpp
        rm modules/core/include/opencv2/core/opengl_*
        rm modules/core/include/opencv2/core/wimage.hpp

        rm -rf modules/dynamicuda
        rm -rf modules/gpu
        rm -rf modules/ocl

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-gpu.patch

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-highgui-include.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-link-stdc++.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-enable-cxx11.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-newer-msvc.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-windows-arm-arch.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/core/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/python
        rm -rf modules/ts
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv2_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: opencv3-source
      env:
        opencv-version: 3.4.20
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake

        rm modules/core/src/cuda_*
        rm modules/core/src/direct*
        rm modules/core/src/gl_*
        rm modules/core/src/intel_gpu_*
        rm modules/core/src/ocl*
        rm modules/core/src/opengl.cpp
        rm modules/core/src/ovx.cpp
        rm modules/core/src/umatrix.hpp
        rm modules/core/src/va_intel.cpp

        rm modules/core/include/opencv2/core/cuda*.hpp
        rm modules/core/include/opencv2/core/directx.hpp
        rm modules/core/include/opencv2/core/ippasync.hpp
        rm modules/core/include/opencv2/core/ocl*.hpp
        rm modules/core/include/opencv2/core/opengl.hpp
        rm modules/core/include/opencv2/core/ovx.hpp
        rm modules/core/include/opencv2/core/private.cuda.hpp
        rm modules/core/include/opencv2/core/va_intel.hpp
        rm modules/core/include/opencv2/core/wimage.hpp
        rm -rf modules/core/include/opencv2/core/cuda
        rm -rf modules/core/include/opencv2/core/opencl
        rm -rf modules/core/include/opencv2/core/openvx

        rm modules/photo/src/denoising.cuda.cpp
        rm modules/photo/include/opencv2/photo/cuda.hpp

        rm -rf modules/cuda*
        rm -rf modules/cudev

        find modules -type d | xargs -i rm -rf {}/src/cuda
        find modules -type d | xargs -i rm -rf {}/src/opencl
        find modules -type d | xargs -i rm -rf {}/perf/cuda
        find modules -type d | xargs -i rm -rf {}/perf/opencl
        find modules -type f | xargs -i sed -i '/opencl_kernels/d' {}
        find modules -type f | xargs -i sed -i '/cuda.hpp/d' {}
        find modules -type f | xargs -i sed -i '/opengl.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ocl_defs.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ocl.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ovx_defs.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ovx.hpp/d' {}
        find modules -type f | xargs -i sed -i '/va_intel.hpp/d' {}

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-gpu.patch

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-emscripten-include.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-newer-msvc.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-windows-arm-arch.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/imgproc/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/js
        rm -rf modules/python
        rm -rf modules/ts
        rm -rf modules/dnn
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv3_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: opencv4-source
      env:
        opencv-version: 4.10.0
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi

        rm modules/core/src/cuda_*
        rm modules/core/src/direct*
        rm modules/core/src/gl_*
        rm modules/core/src/intel_gpu_*
        rm modules/core/src/ocl*
        rm modules/core/src/opengl.cpp
        rm modules/core/src/ovx.cpp
        rm modules/core/src/umatrix.hpp
        rm modules/core/src/va_intel.cpp
        rm modules/core/src/va_wrapper.impl.hpp

        rm modules/core/include/opencv2/core/cuda*.hpp
        rm modules/core/include/opencv2/core/directx.hpp
        rm modules/core/include/opencv2/core/ocl*.hpp
        rm modules/core/include/opencv2/core/opengl.hpp
        rm modules/core/include/opencv2/core/ovx.hpp
        rm modules/core/include/opencv2/core/private.cuda.hpp
        rm modules/core/include/opencv2/core/va_*.hpp
        rm -rf modules/core/include/opencv2/core/cuda
        rm -rf modules/core/include/opencv2/core/opencl
        rm -rf modules/core/include/opencv2/core/openvx

        rm modules/photo/src/denoising.cuda.cpp
        rm modules/photo/include/opencv2/photo/cuda.hpp

        find modules -type d | xargs -i rm -rf {}/src/cuda
        find modules -type d | xargs -i rm -rf {}/src/opencl
        find modules -type d | xargs -i rm -rf {}/perf/cuda
        find modules -type d | xargs -i rm -rf {}/perf/opencl
        find modules -type f | xargs -i sed -i '/opencl_kernels/d' {}
        find modules -type f | xargs -i sed -i '/cuda.hpp/d' {}
        find modules -type f | xargs -i sed -i '/opengl.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ocl_defs.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ocl.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ovx_defs.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ovx.hpp/d' {}
        find modules -type f | xargs -i sed -i '/va_intel.hpp/d' {}

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-gpu.patch

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-windows-arm-arch.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/imgproc/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/js
        rm -rf modules/python
        rm -rf modules/ts
        rm -rf modules/dnn
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv4_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: upload-opencv2-source
      uses: actions/upload-artifact@v4
      with:
        name: opencv-mobile-2.4.13.7-source
        path: opencv-mobile-2.4.13.7.zip
    - name: upload-opencv3-source
      uses: actions/upload-artifact@v4
      with:
        name: opencv-mobile-3.4.20-source
        path: opencv-mobile-3.4.20.zip
    - name: upload-opencv4-source
      uses: actions/upload-artifact@v4
      with:
        name: opencv-mobile-4.10.0-source
        path: opencv-mobile-4.10.0.zip

  android:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        opencv-version: [2.4.13.7, 3.4.20, 4.10.0]
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
        -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
        -DANDROID_PLATFORM=android-21 \
        -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - uses: actions/checkout@v4
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-android" >> $GITHUB_ENV
    
    - name: build-arm64-v8a
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="arm64-v8a" \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j $(nproc)
        cmake --build . --target install
    - name: build-x86
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x86 && cd build-x86
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86" \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x86_64 && cd build-x86_64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86_64" \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        cp -rf ${{ env.SOURCE_DIR }}/build-x86/install/* ${{ env.PACKAGE_NAME }}/
        cp -rf ${{ env.SOURCE_DIR }}/build-x86_64/install/* ${{ env.PACKAGE_NAME }}/
        cp -rf ${{ env.SOURCE_DIR }}/build-armeabi-v7a/install/* ${{ env.PACKAGE_NAME }}/
        cp -rf ${{ env.SOURCE_DIR }}/build-arm64-v8a/install/* ${{ env.PACKAGE_NAME }}/
        zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}
    
    - name: test-arm64-v8a
      run: |
        cd test
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="arm64-v8a" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
        cmake --build . -j $(nproc)
    - name: test-x86
      run: |
        cd test
        mkdir build-x86 && cd build-x86
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
        cmake --build . -j $(nproc)
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86_64" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
        cmake --build . -j $(nproc)
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  harmonyos:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        opencv-version: [2.4.13.7, 3.4.20, 4.10.0]
    env:
      OHOS_NDK_CMAKE: $GITHUB_WORKSPACE/ohos-sdk/linux/native/build-tools/cmake/bin/cmake
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/ohos-sdk/linux/native/build/cmake/ohos.toolchain.cmake \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - uses: actions/checkout@v4
    - name: ndk-fix-debug
      run: |
        wget https://repo.huaweicloud.com/harmonyos/os/4.1.1-Release/ohos-sdk-windows_linux-public.tar.gz
        tar -xf ohos-sdk-windows_linux-public.tar.gz
        cd ohos-sdk/linux
        unzip -q native-linux-x64-4.1.7.8-Release.zip
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-harmonyos" >> $GITHUB_ENV
  
    - name: build-arm64-v8a
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        ${{ env.OHOS_NDK_CMAKE }} ${{ env.COMMON_CMAKE_OPTIONS }} -DOHOS_ARCH="arm64-v8a" \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        ${{ env.OHOS_NDK_CMAKE }} --build . -j $(nproc)
        ${{ env.OHOS_NDK_CMAKE }} --build . --target install
    - name: build-x86_64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x86_64 && cd build-x86_64
        ${{ env.OHOS_NDK_CMAKE }} ${{ env.COMMON_CMAKE_OPTIONS }} -DOHOS_ARCH="x86_64" \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        ${{ env.OHOS_NDK_CMAKE }} --build . -j $(nproc)
        ${{ env.OHOS_NDK_CMAKE }} --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        mkdir ${{ env.PACKAGE_NAME }}/x86_64
        mkdir ${{ env.PACKAGE_NAME }}/armeabi-v7a
        mkdir ${{ env.PACKAGE_NAME }}/arm64-v8a
        cp -rf ${{ env.SOURCE_DIR }}/build-x86_64/install/* ${{ env.PACKAGE_NAME }}/x86_64/
        cp -rf ${{ env.SOURCE_DIR }}/build-armeabi-v7a/install/* ${{ env.PACKAGE_NAME }}/armeabi-v7a/
        cp -rf ${{ env.SOURCE_DIR }}/build-arm64-v8a/install/* ${{ env.PACKAGE_NAME }}/arm64-v8a/
        zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}
    - name: set-opencv-dir
      if: matrix.opencv-version == '2.4.13.7' || matrix.opencv-version == '3.4.20'
      run: echo "OPENCV_SUBDIR=share/OpenCV" >> $GITHUB_ENV
    - name: set-opencv-dir
      if: matrix.opencv-version == '4.10.0'
      run: echo "OPENCV_SUBDIR=lib/cmake/opencv4" >> $GITHUB_ENV
    
    - name: test-arm64-v8a
      run: |
        cd test
        mkdir build-arm64-v8a && cd build-arm64-v8a
        ${{ env.OHOS_NDK_CMAKE }} ${{ env.COMMON_CMAKE_OPTIONS }} -DOHOS_ARCH="arm64-v8a" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/arm64-v8a/${{ env.OPENCV_SUBDIR }} ..
        ${{ env.OHOS_NDK_CMAKE }} --build . -j $(nproc)
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        ${{ env.OHOS_NDK_CMAKE }} ${{ env.COMMON_CMAKE_OPTIONS }} -DOHOS_ARCH="x86_64" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/x86_64/${{ env.OPENCV_SUBDIR }} ..
        ${{ env.OHOS_NDK_CMAKE }} --build . -j $(nproc)
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip


  windows:
    needs: [setup]
    strategy:
      matrix:
        opencv-version: [2.4.13.7, 3.4.20, 4.10.0]
        os-compiler:
          - { msvc-version: vs2015, windows-version: 2019, toolset-version: v140 }
          - { msvc-version: vs2017, windows-version: 2019, toolset-version: v141 }
          - { msvc-version: vs2019, windows-version: 2019, toolset-version: v142 }
          - { msvc-version: vs2022, windows-version: 2022, toolset-version: v143 }
    runs-on: windows-${{ matrix.os-compiler.windows-version }}
    env:
      UseMultiToolTask: true
      COMMON_CMAKE_OPTIONS: -T ${{ matrix.os-compiler.toolset-version }},host=x64 -DCMAKE_INSTALL_PREFIX=install
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $env:GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-windows-${{ matrix.os-compiler.msvc-version }}" >> $env:GITHUB_ENV
    - name: build-x86
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x86; cd build-x86
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A Win32 $(type ../options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x64; cd build-x64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A x64 $(type ../options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: build-arm
      if: matrix.os-compiler.msvc-version == 'vs2019' || matrix.os-compiler.msvc-version == 'vs2022'
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm; cd build-arm
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A arm -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=ARM $(type ../options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: build-arm64
      if: matrix.os-compiler.msvc-version == 'vs2019' || matrix.os-compiler.msvc-version == 'vs2022'
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64; cd build-arm64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A arm64 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=ARM64 $(type ../options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: package
      if: matrix.os-compiler.msvc-version == 'vs2015' || matrix.os-compiler.msvc-version == 'vs2017'
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        mkdir ${{ env.PACKAGE_NAME }}/x86
        mkdir ${{ env.PACKAGE_NAME }}/x64
        Copy-Item -Verbose -Recurse -Path "${{ env.SOURCE_DIR }}\build-x86\install\*" -Destination "${{ env.PACKAGE_NAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "${{ env.SOURCE_DIR }}\build-x64\install\*" -Destination "${{ env.PACKAGE_NAME }}\x64"
        7z a -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}
    - name: package
      if: matrix.os-compiler.msvc-version == 'vs2019' || matrix.os-compiler.msvc-version == 'vs2022'
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        mkdir ${{ env.PACKAGE_NAME }}/x86
        mkdir ${{ env.PACKAGE_NAME }}/x64
        mkdir ${{ env.PACKAGE_NAME }}/arm
        mkdir ${{ env.PACKAGE_NAME }}/arm64
        Copy-Item -Verbose -Recurse -Path "${{ env.SOURCE_DIR }}\build-x86\install\*" -Destination "${{ env.PACKAGE_NAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "${{ env.SOURCE_DIR }}\build-x64\install\*" -Destination "${{ env.PACKAGE_NAME }}\x64"
        Copy-Item -Verbose -Recurse -Path "${{ env.SOURCE_DIR }}\build-arm\install\*" -Destination "${{ env.PACKAGE_NAME }}\arm"
        Copy-Item -Verbose -Recurse -Path "${{ env.SOURCE_DIR }}\build-arm64\install\*" -Destination "${{ env.PACKAGE_NAME }}\arm64"
        7z a -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A Win32 -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGE_NAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 4
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A x64 -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGE_NAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 4
    - name: test-arm
      if: matrix.os-compiler.msvc-version == 'vs2019' || matrix.os-compiler.msvc-version == 'vs2022'
      run: |
        cd test
        mkdir build-arm; cd build-arm
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A arm -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGE_NAME }}\arm" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 4
    - name: test-arm64
      if: matrix.os-compiler.msvc-version == 'vs2019' || matrix.os-compiler.msvc-version == 'vs2022'
      run: |
        cd test
        mkdir build-arm64; cd build-arm64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -A arm64 -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGE_NAME }}\arm64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 4
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  

  

  devboard:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: milkv-duo
            single-core: true
            cmake-toolchain: riscv64-unknown-linux-musl.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://sophon-file.sophon.cn/sophon-prod-s3/drive/23/03/07/16/host-tools.tar.gz
              tar -xf host-tools.tar.gz
            setup-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/host-tools/gcc/riscv64-linux-musl-x86_64
            cmake-options: -DWITH_CVI=ON

          - name: licheerv-nano
            single-core: true
            cmake-toolchain: riscv64-unknown-linux-musl.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://sophon-file.sophon.cn/sophon-prod-s3/drive/23/03/07/16/host-tools.tar.gz
              tar -xf host-tools.tar.gz
            setup-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/host-tools/gcc/riscv64-linux-musl-x86_64
            cmake-options: -DWITH_CVI=ON

          - name: luckfox-pico
            single-core: true
            cmake-toolchain: arm-rockchip830-linux-uclibcgnueabihf.toolchain.cmake
            setup-toolchain-cmd: |
              git clone --depth 1 https://github.com/LuckfoxTECH/luckfox-pico.git luckfox-pico
            setup-env-cmd: |
              export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/luckfox-pico/tools/linux/toolchain/arm-rockchip830-linux-uclibcgnueabihf
            cmake-options: -DWITH_RK=ON

          - name: yuzuki-lizard
            single-core: true
            cmake-toolchain: arm-openwrt-linux-muslgnueabi.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://github.com/YuzukiHD/Yuzukilizard/releases/download/Toolchains/toolchain-sunxi-musl-gcc-830.tar.gz
              tar -xf toolchain-sunxi-musl-gcc-830.tar.gz
            setup-env-cmd: |
              export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
              export STAGING_DIR=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
            cmake-options: -DWITH_AW=ON

          - name: tinyvision
            single-core: true
            cmake-toolchain: arm-openwrt-linux-muslgnueabi.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://github.com/YuzukiHD/Yuzukilizard/releases/download/Toolchains/toolchain-sunxi-musl-gcc-830.tar.gz
              tar -xf toolchain-sunxi-musl-gcc-830.tar.gz
            setup-env-cmd: |
              export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
              export STAGING_DIR=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
            cmake-options: -DWITH_AW=ON

          - name: yuzuki-chameleon
            single-core: false
            cmake-toolchain: arm-openwrt-linux-gnueabi.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://github.com/YuzukiHD/YuzukiChameleon/releases/download/0.0.1/toolchain-sunxi-glibc-arm.tar.gz
              tar -xf toolchain-sunxi-glibc-arm.tar.gz
            setup-env-cmd: |
              export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/toolchain
              export STAGING_DIR=$GITHUB_WORKSPACE/toolchain
            cmake-options: -DWITH_AW=ON

          - name: purple-pi
            single-core: false
            cmake-toolchain: arm-linux-gnueabihf.toolchain.cmake
            setup-toolchain-cmd: |
              git clone --depth 1 https://github.com/industio/PurPle-Pi-R1.git
              cd PurPle-Pi-R1/toolchain
              sh install_toolchain.sh
            setup-env-cmd: |
              export PATH=$PATH:$GITHUB_WORKSPACE/PurPle-Pi-R1/toolchain/gcc-arm-8.2-2018.08-x86_64-arm-linux-gnueabihf/bin
            cmake-options:

          - name: myir-t113i
            single-core: false
            cmake-toolchain: arm-linux-gnueabi.toolchain.cmake
            setup-toolchain-cmd: |
              git clone --depth 1 https://github.com/MYIR-ALLWINNER/toolchain.git
            setup-env-cmd: |
              export PATH=$PATH:$GITHUB_WORKSPACE/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin
            cmake-options: -DWITH_AW=ON

    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../../toolchains/${{ matrix.cmake-toolchain }} \
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \

    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-4.10.0-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-4.10.0.zip
        echo "SOURCE_DIR=opencv-mobile-4.10.0" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-4.10.0-${{ matrix.name }}" >> $GITHUB_ENV
    - name: setup-toolchain
      run: ${{ matrix.setup-toolchain-cmd }}

    - name: build-disable-thread
      if: ${{ matrix.single-core }}
      run: |
        cd ${{ env.SOURCE_DIR }}
        patch -p1 -i ../patches/opencv-4.10.0-no-atomic.patch
        mkdir build && cd build
        ${{ matrix.setup-env-cmd }}
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} ${{ matrix.cmake-options }} \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            -DWITH_OPENMP=OFF -DOPENCV_DISABLE_THREAD_SUPPORT=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install

    - name: build-enable-thread
      if: ${{ ! matrix.single-core }}
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build && cd build
        ${{ matrix.setup-env-cmd }}
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} ${{ matrix.cmake-options }} \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install

    - name: package
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        cp -rf ${{ env.SOURCE_DIR }}/build/install/* ${{ env.PACKAGE_NAME }}/
        zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}

    - name: test
      run: |
        cd test
        mkdir build && cd build
        ${{ matrix.setup-env-cmd }}
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/lib/cmake/opencv4 ..
        cmake --build . -j $(nproc)

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  release:
    permissions:
      contents: write  # for softprops/action-gh-release to create a release
    needs: [setup, android]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: create-release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.setup.outputs.VERSION }}
        name: Release ${{ needs.setup.outputs.VERSION }}
        files: artifacts/*/*.zip
